<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>直播紀錄</h1>
<h2>第二週</h2>
<p>進行任務分派,並以小組方式完成assiganment 1</p>
<p><img alt="" height="378" src="/images/57278.jpg" width="379"/></p>
<p>課程討論直播紀錄</p>
<p><iframe allowfullscreen="allowfullscreen" height="375" src="//www.youtube.com/embed/JXUKf0cfJcc" width="500"></iframe></p>
<h2>第三週</h2>
<p><br/><iframe allowfullscreen="allowfullscreen" height="375" src="//www.youtube.com/embed/QTfPD5bpeKc" width="500"></iframe></p>
<h2>第五週</h2>
<p>分配翻譯段落並將完成檔案上傳至個人網頁</p>
<p><img alt="" height="274" src="/images/57277.jpg" width="500"/></p>
<p>討論課程直播紀錄</p>
<p><iframe allowfullscreen="allowfullscreen" height="375" src="//www.youtube.com/embed/ElNea4b1dX8" width="500"></iframe></p>
<h2>第六週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="375" src="//www.youtube.com/embed/B6jt5OAf424" width="500"></iframe></p>
<h2>第七週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="375" src="//www.youtube.com/embed/96y-KSUWDyE" width="500"></iframe></p>
<h2>第八週</h2>
<p>1.利用onshape繪製車子(不可過於簡易,要有懸吊系統跟一些複雜度)<br/>(1)了解零件檔案格式及如何轉檔導入coppeliasim<br/>(2)轉檔格式有幾個版本需要了解</p>
<p>協同人員:40723104,40723107,40723122,40723140,40723149,40723151,40723153,40723154</p>
<p>2.利用 CoppeliaSim Python Remote API 控制四輪車<br/>(1)了解 Python Remote API程式,並且能夠實際應用,對車子進行遠端遙控</p>
<p>協同人員:40723114,40723115,40723118,40723123,40723155</p>
<p>3.全體人員須了解 Ubuntu 20.04 虛擬主機<br/>(1) 了解 NAT ,讓虛擬主機可以上網,做內外IP的轉換</p>
<p>(2)了解 Brid ged Adapter ,可建立獨立service,希望藉由兩片網卡,可以對外連線</p>
<p>(3)了解 Host - only Adapte</p>
<p>繪圖內容分配</p>
<p><img alt="" height="500" src="/images/64586.jpg" width="283"/></p>
<h2>第九週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/opi_PrsUMW4" width="560"></iframe></p>
<h2>第十週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/HauW6F-ez7w" width="560"></iframe></p>
<h2>第十一週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Y-v5v3glZM4" width="560"></iframe></p>
<h2>第十二週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Fwt_LDqD964" width="560"></iframe></p>
<h2>第十三週</h2>
<h2>第十四週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Oz_qyhhmopk" width="560"></iframe></p>
<h2>第十五週</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/T4lDjSueeW4" width="560"></iframe></p>
<h1>每周進度</h1>
<h2>w1</h2>
<h4>本週進度</h4>
<p>介紹學期目標和進度和建立倉儲cd2020和網頁</p>
<p><img alt="" height="432" src="/images/3444.png" width="768"/></p>
<h2>w2</h2>
<h4>本週進度</h4>
<p>更新python至3.8.2</p>
<p><img alt="" height="450" src="/images/python.png" width="800"/></p>
<p>透過這個網站下載 <a href="https://s40723114.github.io/get_page/python%20%E6%9B%B4%E6%96%B0%E8%87%B33.8.2/Windows%20x86-64%20executable%20installer">Windows x86-64 executable installe</a>r 的版本</p>
<p>完成下載後開啟並選擇下方的<span>Customize installation</span></p>
<p><img alt="" height="409" src="/images/步驟.png" width="666"/></p>
<p>並選擇安裝位置後將python安裝到隨身碟中的Y槽裡</p>
<p>並使用start_mdecourse.bat 批次檔</p>
<p>將<span>批次檔中的py373改為安裝python 3.8.2版本的資料夾</span></p>
<p><span>並將新版本的資料夾命名為py382即可完成這次更新</span></p>
<h2>w3</h2>
<h4>本週進度</h4>
<p>以小組方式進行亂數分組研究 以下是程式碼代表的內容如下</p>
<p><strong>1. random.random()</strong></p>
<p>　　random.random()方法返回一個隨機數，其在0至1的範圍之內，以下是其具體用法：</p>
<p>　　import random</p>
<p>　　print (“隨機數: “, random.random())</p>
<p>　　輸出結果：0.22867521257116</p>
<p><strong>2. random.uniform()</strong></p>
<p>　　random.uniform()是在指定範圍內生成隨機數，其有兩個引數，一個是範圍上限，一個是範圍下線，具體用法如下：</p>
<p>　　import random</p>
<p>　　print (random.uniform(2, 6))</p>
<p>　　輸出結果：3.62567571297255</p>
<p><strong>3. random.randint()</strong></p>
<p>　　random.randint()是隨機生成指定範圍內的整數，其有兩個引數，一個是範圍上限，一個是範圍下線，具體用法如下：</p>
<p>　　import random</p>
<p>　　print (random.randint(6,8))</p>
<p>　　輸出結果：8</p>
<p><strong>4. random.randrange()</strong></p>
<p>　　random.randrange()是在指定範圍內，按指定基數遞增的集合中獲得一個隨機數，有三個引數，前兩個引數代表範圍上限和下限，第三個引數是遞增增量，具體用法如下：</p>
<p>　　import random</p>
<p>　　print (random.randrange(6, 28, 3))</p>
<p>　　輸出結果：15</p>
<p><strong>5. random.choice()</strong></p>
<p>　　random.choice()是從序列中獲取一個隨機元素，具體用法如下：</p>
<p>　　import random</p>
<p>　　print (random.choice(“www.jb51.net”))</p>
<p>　　輸出結果：o</p>
<p><strong>6. random.shuffle()</strong></p>
<p>　　random.shuffle()函式是將一個列表中的元素打亂，隨機排序，具體用法如下：</p>
<p>　　import random</p>
<p>　　num = [1, 2, 3, 4, 5]</p>
<p>　　random.shuffle(num)</p>
<p>　　print (num)</p>
<p>　　輸出結果：[3, 5, 2, 4, 1]</p>
<p><strong>7. random.sample()<br/></strong></p>
<p>　　random.sample()函式是從指定序列中隨機獲取指定長度的片段，原有序列不會改變，有兩個引數，第一個引數代表指定序列，第二個引數是需獲取的片段長度，具體用法如下：</p>
<p>　　import random</p>
<p>　　num = [1, 2, 3, 4, 5]</p>
<p>　　sli = random.sample(num, 3)</p>
<p>　　print (sli)</p>
<p>　　輸出結果：[2, 4, 5]</p>
<p>參考資料: https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/357241/</p>
<h2>w6</h2>
<h4>本週進度</h4>
<p>進行小組直播討論,分配工作內容 : 翻譯</p>
<h2>w7</h2>
<p>本週是assiganmant2截止時間,這週課程也是採用線上教學模式,老師進行組別隨機抽點直播</p>
<p><img caption="false" height="279" src="/images/未命名.png" width="300"/></p>
<p>直播紀錄影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="300" src="//www.youtube.com/embed/Y04PMdEY6P4" width="420"></iframe></p>
<h2>w9</h2>
<p>紙本筆記</p>
<p><img alt="" height="254" src="/images/64584.jpg" width="500"/></p>
<h2>w12</h2>
<p>這週老師開始進行隨機分組協同編輯網頁 當被抽到時系統會寄信通知你</p>
<p><img alt="" height="237" src="/images/cdaw12.png" width="500"/></p>
<p><span>▲通知協同信件</span></p>
<p><img alt="" height="231" src="/images/12網頁.png" width="500"/></p>
<p><span>▲小組倉儲</span></p>
<p><span>我們要學習和不同的組員在短時間內進行協同,並且要避免將倉儲推爆</span></p>
<p><span>主要任務是在網頁上放上自己的本週進度,但因為是第一週實驗所以只放上個人資訊就沒時間了</span></p>
<p><span><img alt="" height="254" src="/images/12網頁1.png" width="500"/></span></p>
<p><span>▲小分組網頁</span></p>
<h2>w13</h2>
<p><img alt="" height="237" src="/images/cdaw13.png" width="500"/></p>
<p><span>▲抽中的通知信</span></p>
<p><span>這週是第二週 已經較為熟悉操作方式</span></p>
<p><span>一樣是需要將自己的進度放置於網頁並盡量不造成衝突</span></p>
<p><span><img alt="" height="223" src="/images/cdaw13-1.png" width="500"/></span></p>
<p><span>▲小組倉儲</span></p>
<p>小分組倉儲:<a href="https://github.com/mdecourse/cdaw13-1">https://github.com/mdecourse/cdaw13-1</a></p>
<p>小分組網頁:<a href="http://mde.tw/cdaw13-1/content/index.html">http://mde.tw/cdaw13-1/content/index.html</a></p>
<h2>w14</h2>
<p><img alt="" height="246" src="/images/cdaw14-1.png" width="500"/></p>
<p><img alt="" height="240" src="/images/cdaw14-2.png" width="500"/></p>
<p><span>▲抽中的通知信</span></p>
<p><span>老師的抽取系統是不會排除已經抽中的人,所以有可能會一次被抽中兩組的情況,此時只需要選擇一組去做分組作業即可 : )</span></p>
<p><span><img alt="" height="225" src="/images/cdaw14-3.png" width="500"/></span></p>
<p><span>▲小分組倉儲</span></p>
<p>小分組倉儲:<a href="https://github.com/mdecourse/cdaw14-3">https://github.com/mdecourse/cdaw14-3</a></p>
<p>小分組網頁:<a href="http://mde.tw/cdaw14-3/content/index.html">http://mde.tw/cdaw14-3/content/index.html</a></p>
<p><span></span></p>
<h2>w15</h2>
<p><img alt="" height="245" src="/images/cdaw15.png" width="500"/></p>
<p>小分組倉儲:<a href="https://github.com/mdecourse/cdaw14-3">https://github.com/mdecourse/cdaw15-</a>1</p>
<p>小分組網頁:<a href="http://mde.tw/cdaw14-3/content/index.html">http://mde.tw/cdaw15-1/content/index.html</a></p><h2>w16</h2>
<p><img alt="" height="246" src="/images/cdaw16.png" width="500"/></p>
<p>小分組倉儲:<a href="https://github.com/mdecourse/cdaw14-3">https://github.com/mdecourse/cdaw16-</a>2</p>
<p>小分組網頁:<a href="http://mde.tw/cdaw14-3/content/index.html">http://mde.tw/cdaw16-2/content/index.html</a></p><h1>Assiganment1</h1>
<h2>更新python</h2>
<p>更新python至3.8.2</p>
<p><img alt="" height="450" src="/images/python.png" width="800"/></p>
<p>網站網址 : <a href="https://www.python.org/downloads/release/python-382/">https://www.python.org/downloads/release/python-382/</a></p>
<p>透過這個網站下載 <a href="https://s40723114.github.io/get_page/python%20%E6%9B%B4%E6%96%B0%E8%87%B33.8.2/Windows%20x86-64%20executable%20installer">Windows x86-64 executable installe</a>r 的版本</p>
<p>完成下載後開啟並選擇下方的<span>Customize installation</span></p>
<p><img alt="" height="409" src="/images/步驟.png" width="666"/></p>
<p>並選擇安裝位置後將python安裝到隨身碟中的Y槽裡</p>
<p>並使用start_mdecourse.bat 批次檔</p>
<p>將<span>批次檔中的py373改為安裝python 3.8.2版本的資料夾</span></p>
<p><span>並將新版本的資料夾命名為py382即可完成這次更新</span></p>
<h2>亂數分組</h2>
<p>亂數分組的流程大致可以分為4個步驟</p>
<p><span style="background-color: #ffcc99;">1 抓出學員資料</span></p>
<p>利用Python的requests模組來抓取網頁上的學生名單</p>
<p><span style="background-color: #ffcc99;">2 將學生名單轉為文字檔</span></p>
<p>將抓取到的學生名單進行轉換(文字檔才可進行轉換數列)</p>
<p><span style="background-color: #ffcc99;">3 再將文字檔內容轉為數列</span></p>
<p>將轉換後的文字檔間使用空白格或頓號進行區隔</p>
<p><span style="background-color: #ffcc99;">4 使用random模組將數列亂數分組</span></p>
<p>將轉換好的數列進行隨機排列分組</p>
<p>(random<span>主要是</span><span>運用在將函數中的順序打亂)</span><br/><span></span></p>
<div><span></span></div>
<p><span style="background-color: #ffcc99;"></span></p>
<h1>Assiganment2</h1>
<h2>Top 0感想</h2>
<p><span style="color: #ff6600;">40723153 吳佳穎</span></p>
<p>合作不只是行為更是一種未來的趨勢，從古至今合作的觀念一直是被推崇的，從【單絲不成線，獨木不成林】 、【萬人操弓，共射一招，招無不中】。等諺語就能知道。在工作上一個人或許可以迅速的決定所有事情，但一個人絕對比不上數個人加起來的能力，透過合作讓每個人發揮自己的特長讓效率以倍數增加。看完這個章節讓我更加理解到協同的重要性，而在協同前也需要做許多的準備，無論是個人心態的調整抑或是選用協同的工具都是非常重要的，我也學到了很多協同的優點，讓我印象深刻的是能讓客戶參與產品設計過程，透過讓客戶的參與能加速溝通的效率，更能讓消費端理解設計者的用意和進度過程，創造雙贏的局面。</p>
<h2>onshape繪圖</h2>
<p>作業其中一項是需要在onshape上繪圖,並協同共用零件進行組裝</p>
<p>雖然沒有被分配到需要繪製零件但仍舊可以自己進行練習</p>
<p>學習繪圖和共用的方法</p>
<p><img alt="" height="500" src="/images/83560.jpg" width="266"/></p>
<p><span>▲工作分配圖</span></p>
<p><span><img caption="false" height="225" src="/images/onshap畫圖.png" width="500"/></span></p>
<p><span>▲練習繪製各式零件</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Qg9Jmt8famM" width="560"></iframe></p>
<p><span>▲繪圖練習影片</span></p>
<h2>webots介紹翻譯</h2>
<h3>Brake 制動器</h3>
<p>制動器</p>
<p><img alt="" height="52" src="/images/制動程式.png" width="500"/></p>
<p>Description 描述</p>
<p><span>A <span style="color: #ff6600;"><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/brake#brake" style="color: #ff6600;">Brake</a></span><span><span style="color: #ff6600;"> </span>node can be used in a mechanical simulation in order to change the friction of a joint. The<span> </span></span><span style="color: #ff6600;"><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/brake#brake" style="color: #ff6600;">Brake</a></span><span><span> </span>node can be inserted in the<span> </span></span><code>device</code><span><span> </span>field of a<span> </span></span><span style="color: #ff6600;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/hingejoint" style="color: #ff6600;">HingeJoint</a></span><span>, a<span> </span></span><span style="color: #ff6600;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/hinge2joint" style="color: #ff6600;">Hinge2Joint</a></span><span>, a<span> </span></span><span style="color: #ff6600;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/sliderjoint" style="color: #ff6600;">SliderJoint</a></span><span>, or a<span> </span></span><span style="color: #ff6600;"><a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/track" style="color: #ff6600;">Track</a></span><span>.</span></span></p>
<p><span>可以在機械仿真中按順序使用制動節點</span>改變關節的摩擦力。 制動節點可以插入鉸鏈接頭，鉸鏈雙接頭與滑塊關節或軌道。</p>
<p><strong>剎車功能</strong></p>
<p><strong><img alt="" height="215" src="/images/制動1.png" width="500"/></strong></p>
<p>Descriptionaul 描述</p>
<p><em>set the damping constant coefficient of the joint and get the type of brake</em></p>
<p>The<span style="background-color: #808080;"> <span style="color: #ffffff;"><code>wb_brake_set_damping_constant</code></span> </span>function sets the value of the dampingConstant coefficient (Ns/m or Nms) of the joint. If any dampingConstant is already set using <a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/jointparameters?tab-language=python">JointParameters</a> the resulting dampingConstant coefficient is the sum of the one in the <a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/jointparameters?tab-language=python">JointParameters</a> and the one set using the<span style="color: #ffffff; background-color: #808080;"> <code>wb_brake_set_damping_constant</code> </span>function.</p>
<p>The<span style="background-color: #808080;"> <span style="color: #ffffff;"><code>wb_brake_get_type</code></span> </span>function returns the type of the brake. It will return<span style="background-color: #808080;"> <span style="color: #ffffff;"><code>WB_ROTATIONAL</code></span> </span>if the sensor is associated with a <a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/hingejoint?tab-language=python">HingeJoint</a> or a <a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/hinge2joint?tab-language=python">Hinge2Joint</a> node, and<span style="background-color: #808080;"> <span style="color: #ffffff;"><code>WB_LINEAR</code></span> </span>if it is associated with a <a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/sliderjoint?tab-language=python">SliderJoint</a> or a <a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/track?tab-language=python">Track</a> node.</p>
<p>設置關節的阻尼常數係數並獲得制動器的類型</p>
<p><span style="background-color: #808080; color: #ffffff;"><code> wb_brake_set_damping_constant</code> </span>為函數設置關節的阻尼常數係數的值（Ns / m或Nms）。如果已經使用JointParameters設置了任何阻尼常數，則所產生的dampingConstant係數是JointParameters中的阻尼常數與使用<span style="background-color: #808080; color: #ffffff;">wb_brake_set_damping_constant</span>函數設置的一個阻尼係數之和。</p>
<p><span style="background-color: #808080; color: #ffffff;"> wb_brake_get_type </span>函數返回制動器的類型。如果傳感器與HingeJoint或Hinge2Joint節點關聯，它將返回<span style="color: #ffffff; background-color: #808080;"> WB_ROTATIONAL </span>；如果傳感器與SliderJoint或Track節點關聯，則將返回<span style="background-color: #808080; color: #ffffff;"> WB_LINEAR </span>。</p>
<p><img alt="" height="189" src="/images/制動2.png" width="500"/></p>
<p><span>Descriptionaul 描述</span></p>
<p><em>get associated devices</em></p>
<p>The<span style="color: #ffffff; background-color: #808080;"> <code>wb_brake_get_motor</code> </span><span style="color: #000000;">and</span><span style="color: #ffffff; background-color: #808080;"> <code>wb_brake_get_position_sensor</code> </span>functions return the<span> </span><a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/motor?tab-language=python">Motor</a><span> </span>and<span> </span><a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/positionsensor?tab-language=python">PositionSensor</a><span> </span>instances defined in the same<span> </span><a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/joint?tab-language=python">Joint</a><span> </span>or<span> </span><a class="dynamicLoad" href="https://cyberbotics.com/doc/reference/track?tab-language=python">Track</a><span> </span><code>device</code><span> </span>field. If none is defined they return 0.</p>
<p><span style="background-color: #808080; color: #ffffff;"> wb_brake_get_motor </span>和<span style="color: #ffffff; background-color: #808080;"> wb_brake_get_position_sensor </span>函數返回在相同的Joint或Track設備字段中定義的Motor和PositionSensor實例。 如果未定義，則返回0。</p>
<h3>Connector 連接器</h3>
<p>連接器</p>
<p><img alt="" height="223" src="/images/連接器程式.png" width="500"/></p>
<p><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes are used to simulate mechanical docking systems, or any other type of device, that can dynamically create a physical link (or<span> </span><em>connection</em>) with another device of the same type.</p>
<p><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes can only connect to other<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes. At any time, each connection involves exactly two<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes (peer to peer). The physical connection between two<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes can be created and destroyed at run time by the robot's controller. The primary idea of<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes is to enable the dynamic reconfiguration of modular robots, but more generally,<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes can be used in any situation where solids need to be attached to other solids.</p>
<p><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes were designed to simulate various types of docking hardware:</p>
<ul>
<li>Mechanical links held in place by a latch.</li>
<li>Gripping mechanisms.</li>
<li>Magnetic links between permanent magnets (or electromagnets).</li>
<li>Pneumatic suction systems, etc.</li>
</ul>
<p>Connectors can be classified into two types, independent of the actual hardware system:</p>
<p><em>Symmetric connectors</em>, where the two connecting faces are mechanically (and electrically) equivalent. In such cases both connectors are active.</p>
<p><em>Asymmetric connectors</em>, where the two connecting interfaces are mechanically different. In asymmetric systems there is usually one active and one passive connector.</p>
<p>The detection of the presence of a peer<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>is based on simple distance and angle measurements, and therefore the<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/connector#connector">Connector</a><span> </span>nodes are a computationally inexpensive way of simulating docking mechanisms.</p>
<p>連接器節點用於模擬機械對接系統或任何其他類型的設備，這些設備可以動態創建與另一個相同類型設備的物理鏈接（或連接）。</p>
<p>連接器節點只能連接到其他連接器節點。在任何時候，每個連接都恰好涉及兩個連接器節點（對等）。兩個連接器節點之間的物理連接可以在運行時由機器人的控制器創建和銷毀。連接器節點的主要思想是實現模塊化機械手的動態重新配置，但是更廣泛地說，連接器節點可用於需要將實體連接到其他實體的任何情況。</p>
<p>連接器節點旨在模擬各種類型的對接硬件：</p>
<p>機械鏈接由閂鎖固定在適當的位置。<br/>抓緊機制。<br/>永磁體（或電磁體）之間的磁鏈。<br/>氣動吸風系統等<br/>連接器可以分為兩種類型，與實際的硬件系統無關：</p>
<p>對稱連接器，其中兩個連接面在機械（和電氣）方面等效。在這種情況下，兩個連接器均處於活動狀態。</p>
<p>非對稱連接器，其中兩個連接接口在機械上是不同的。在非對稱系統中，通常有一個有源和一個無源連接器。</p>
<p>對等連接器是否存在的檢測基於簡單的距離和角度測量，因此，連接器節點是一種模擬對接機制的計算廉價方法。</p>
<p><strong>Field Summary 領域摘要</strong></p>
<ul>
<li>
<p><code>型號(model)</code>: 指定連接器的型號。僅當兩個連接器節點的模型字符串相同時，它們才能連接。</p>
</li>
<li>
<p><code>類型(type)</code>:指定連接器的類型，必須為以下之一：“對稱”，“主動”或“被動”。 “對稱”連接器只能鎖定到另一個“對稱”連接器（並從中解鎖）。 “主動”連接器只能鎖定到“被動”連接器（並從中解鎖）。 “被動”連接器無法鎖定或解鎖（這對於屬於靜態環境的連接器特別有用）</p>
</li>
<li>
<p><code>鎖定(isLocked)</code>:表示連接器的鎖定狀態。 可以通過 wb_connector_lock 和wb_connector_unlock API函數更改鎖定狀態。 鎖定狀態表示鎖定硬件的當前狀態，它不表示兩個連接器之間是否存在實際的物理鏈接。 例如，根據硬件類型，isLocked可以表示關閉了機械閂鎖或機械手，已激活電磁體，已將永磁體移至吸引狀態或已激活了吸水泵等。 僅當存在兼容的對等方時（或連接器被自動鎖定時）調用wb_connector_lock函數時，實際的物理鏈接才存在。<code></code></p>
</li>
<li>
<p><code>自動鎖定(autoLock)</code>: 指定是啟用還是禁用自動鎖定。自動鎖定允許連接器在出現兼容對等方時自動鎖定。為了成功地自動鎖定，當對等方出現時，autoLock和isLocked字段都必須為TRUE，這意味著wb_connector_lock函數必須已被更早調用。 autoLock的一般想法是允許被動鎖定。許多彈簧安裝的閂鎖機構或磁性系統被動地鎖定其同級件。</p>
</li>
<li>
<p><code>單邊鎖定(unilateralLock)</code>: 表示僅鎖定一個對等方即可創建物理鏈接。對於要求雙方都處於鎖定狀態才能創建物理鏈接的系統，必須將該字段設置為FALSE。例如，使用旋轉磁鐵的對稱連接器屬於此類，因為兩個連接器必須同時處於磁性“吸引”狀態才能創建鏈接。請注意，對於“活動”連接器，此字段應始終為TRUE，否則對其將無法鎖定。</p>
</li>
<li>
<p><code>單邊解鎖(unilateralUnlock)</code>: 表示僅解鎖一個對等體就足以破壞物理鏈路。對於要求雙方都處於解鎖狀態才能斷開物理鏈接的系統，必須將該字段設置為FALSE。例如，連接器經常使用雙向閂鎖機制，並且每一側都必須釋放自己的閂鎖，以使鏈接斷開。請注意，對於“活動”連接器，此字段應始終為TRUE，否則它們將無法解鎖。</p>
</li>
<li>
<p><code>距離公差(distanceTolerance)</code>: 兩個連接器之間的最大距離[以米為單位]，仍然允許它們成功鎖定。在連接器坐標系的原點之間測量距離。</p>
</li>
<li>
<p><code>軸公差(axisTolerance)</code>:兩個連接器的Z軸之間可以成功鎖定的最大角度[弧度]。 當兩個連接器節點的Z軸平行（在公差範圍內）但指向相反時，它們可以鎖定。</p>
</li>
<li>
<p><code>旋轉公差(rotationTolerance)</code>: 相對於每個允許的對接旋轉的公差角度差（請參見下圖）。</p>
<img alt="" height="444" src="/images/旋轉公差.png" width="500"/></li>
<li>
<p><code>旋轉數值(numberOfRotations)</code>: 指定在圍繞連接器的z軸完整360度旋轉中允許多少個不同的對接旋轉。 例如，根據機械和電氣接口的不同，模塊化機器人的連接器通常可進行1、2或4路對接。 如該圖所示，如果numberOfRotations為4，則將有4個不同的對接位置（每90度一個）。 如果您不想檢查旋轉對齊標準，則該字段應設置為零。</p>
<p>筆記: <span> </span><span>對於autoLock，distanceTolerance，axisTolerance，rotationTolerance和numberOfRotations等字段，在其他連接器中的這些字段的值並不重要，因每個連接器將獨立檢查其是否滿足條件。</span></p>
</li>
<li>
<p><code>拉伸(snap)</code>: 當為TRUE時：兩個連接器對接時會自動對齊（對齊，調整等）。對齊方式有三點：1）旋轉兩個物體，使其z軸平行（但指向相反的方向），2）旋轉兩個物體，以使其y軸與可能的旋轉對接位置之一匹配， 3）兩個物體相互靠近，以使其坐標系的原點匹配。請注意，當numberOfRotations字段為0時，將省略步驟2，因此旋轉對齊保持自由。作為步驟1和3的結果，連接器表面始終會重疊。建議為兩個連接器設置相同的捕捉值。</p>
</li>
<li>
<p><code>抗拉強度(tensileStrength)</code>: 對接機構在斷裂之前可以承受的最大牛頓[N]拉伸力。這可以用來模擬對接機構的破裂。拉力對應於將兩個連接器拉開的力（沿負Z軸方向）。當拉伸力超過拉伸強度時，連桿斷裂。請注意，如果兩個連接器均被鎖定，則有效抗拉強度將對應於兩個連接器的抗張強度字段的總和。默認值-1表示無限強大的對接機制，無論施加多大的力都不會斷開（如果兩個連接器均被鎖定，則將其中一個連接器的抗張強度字段設置為-1就足夠了）。</p>
</li>
<li>
<p><code>抗剪強度shearStrength</code>: 表示對接機構在破裂前可以承受的最大牛頓[N]剪切力。 這可以用來模擬對接機構的破裂。 shearStrength字段指定兩個連接器承受力的能力，該力會使它們在相反的方向（在xy平面中）彼此相對滑動。 請注意，如果兩個連接器均被鎖定，則有效抗剪強度對應於兩個連接器的shearStrength字段的總和。 默認值-1表示無限強的對接機制，無論施加多大的力都不會斷開（如果兩個連接器均被鎖定，則將其中一個連接器的shearStrength字段設置為-1就足夠了）。</p>
</li>
</ul>
<h3>Display 顯示</h3>
<p>顯示</p>
<p><img alt="" height="77" src="/images/顯示程式.png" width="500"/></p>
<p><strong>Description介紹</strong></p>
<p>Display節點允許使用簡單的API函數處理2D像素陣列，並將其渲染為3D視圖上的2D疊加層，任何Shape節點的2D紋理或兩者。 它可以對嵌入式屏幕建模，也可以顯示任何圖形信息，例如圖形，文本，機器人軌跡，已過濾的攝像機圖像等。</p>
<p>如果“顯示”節點的第一個子節點是或包含（如果第一個節點是“組”，則為遞歸搜索）具有ImageTexture的Shape節點，則將這些ImageTexture節點的內部紋理替換為 顯示。 在這種情況下，Shape.appearance字段應包含一個Appearance節點（而不是PBRAppearance節點）。 有必要將一個或多個ImageTexture節點的過濾字段設置為0，以防止在與顯示器保持距離時出現問題。</p>
<p><strong>Field Summary 領域摘要</strong></p>
<ul>
<li>
<p><code>寬度 width</code>: 以像素為單位的顯示寬度</p>
</li>
<li>
<p><code>高度 height</code>: 顯示器的高度（以像素為單位)</p>
</li>
</ul>
<p><strong>Coordinates System 座標系</strong></p>
<p><span>Internally, the </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/display#display">Display</a><span><span> </span>image is stored in a 2D pixel array. The RGBA value (4x8 bits) of a pixel is dislayed in the status bar (the bar at the bottom of the console window) when the mouse hovers over the pixel in the<span> </span></span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/display#display">Display</a><span>. The 2D array has a fixed size defined by the<span> </span></span><code>width</code><span><span> </span>and<span> </span></span><code>height</code><span><span> </span>fields. The (0,0) coordinate corresponds to the top left pixel, while the (</span><code>width</code><span>-1,</span><code>height</code><span>-1) coordinate corresponds to the bottom right pixel.</span></p>
<p>在內部，顯示圖像存儲在2D像素陣列中。 當鼠標懸停在顯示器中的像素上時，像素的RGBA值（4x8位）會顯示在狀態欄（控制台窗口底部的欄）中。 2D數組具有由width和height字段定義的固定大小。 （0,0）坐標對應於左上方像素，而（width-1，height-1）坐標對應於右下方像素。</p>
<p><strong>Command Stack 命令碼</strong></p>
<p>顯示設備API的每個函數調用（wb_display_get_width和wb_display_get_height函數除外）都將特定命令存儲到內部堆棧中。 在下一次調用wb_robot_step函數時，使用FIFO方案（先進先出）將此命令堆棧發送到Webots，以便以與相應函數調用相同的順序執行命令。</p>
<p><strong>context 語境</strong></p>
<p>顯示設備除其他外具有兩種功能： 可以設置顯示當前狀態的上下文上下文，以及可以繪製特定圖元的繪圖對象。 繪圖功能的行為取決於顯示上下文。 例如，為了繪製兩條紅線，必須在調用兩次wb_display_draw_line繪製函數以繪製兩條線之前，調用wb_display_set_color上下文函數將顯示器的內部顏色設置為紅色。</p>
<p><strong>Overlay Image 重疊圖像</strong></p>
<p><strong><img alt="" height="328" src="/images/顯示1.png" width="300"/></strong></p>
<p>默認情況下，顯示圖像顯示在帶有青色邊框的3D窗口頂部，請參見此圖。 用戶可以通過單擊鼠標右下角的圖標來拖放該顯示圖像並將其調整大小。 此外，右上角提供了一個關閉按鈕以隱藏圖像。 一旦選擇了機械手，也可以在“機械手”菜單中的“顯示設備”項中顯示或隱藏覆蓋圖像。</p>
<p>也可以通過雙擊在外部窗口中顯示顯示圖像。 完成後，覆蓋層消失，並彈出一個新窗口。 然後，關閉窗口後，疊加層將自動恢復。</p>
<p><strong>Display Functions 顯示功能</strong></p>
<p><strong><img alt="" height="155" src="/images/顯示2.png" width="500"/></strong></p>
<p>獲得顯示器的尺寸</p>
<p>這些函數分別返回width和height字段的值。</p>
<p><strong><img alt="" height="222" src="/images/顯示3.png" width="500"/></strong></p>
<p>設置顯示器的繪圖屬性</p>
<p>這四個功能定義了將在其中應用後續繪製命令（請參見繪製基本功能）的上下文。</p>
<p>wb_display_set_color函數定義後續繪製命令的顏色。它以3字節RGB整數表示，最高有效字節（十六進製表示形式中的最左字節）代表紅色分量，第二最高有效字節代表綠色分量，第三個字節代表藍色分量。例如，0xFF00FF（紅色和藍色分量的混合）表示洋紅色。在第一次調用wb_display_set_color函數之前，默認顏色為白色（0xFFFFFF）。</p>
<p>wb_display_set_alpha函數定義後續繪製命令的Alpha通道。此功能僅應用於透明或半透明的特殊顯示器（可以通過顯示器看到）。 Alpha通道定義了顯示器像素的不透明度。它表示為介於0.0和1.0之間的浮點值，分別表示完全透明和完全不透明。中間值對應於半透明級別。在第一次調用wb_display_set_alpha函數之前，alpha的默認值為1（不透明）。</p>
<p>wb_display_set_opacity函數定義新像素將以哪種不透明度替換舊像素，以用於以下繪製指令。它表示為0.0到1.0之間的浮點值；而0表示新像素對舊像素沒有影響，而1表示新像素將完全替換舊像素。根據混合公式，僅顏色通道受不透明度影響。</p>
<p><img alt="" height="25" src="/images/顯示4.png" width="367"/></p>
<p>wb_display_set_font函數定義使用wb_display_draw_text函數繪製的字符的字體及其大小（即以像素為單位的字符高度），anti_aliasing參數定義是否應使用抗鋸齒過濾來呈現字符。 可以使用以下標準字體：</p>
<ul>
<li>Arial</li>
<li>Arial Black</li>
<li>Comic Sans MS</li>
<li>Courier New</li>
<li>Georgia</li>
<li>Impact</li>
<li>Lucida Console</li>
<li>Lucida Sans Unicode</li>
<li>Palatino Linotype</li>
<li>Tahoma</li>
<li>Times New Roman</li>
<li>Trebuchet MS</li>
<li>Verdana</li>
</ul>
<p>除了這些字體之外，還可以在PROJECT_HOME / fonts目錄中添加其他TrueType字體文件。 默認字體是Lucida Console，8像素，帶有抗鋸齒功能。</p>
<p></p>
<h3>Emitter 發射極</h3>
<p>發射極</p>
<p><img alt="" height="167" src="/images/發射極程式.png" width="500"/></p>
<p><strong>Description 描述</strong></p>
<p>“發射器”節點用於建模無線電，串行或紅外發射器。 必須將“發射器”節點添加到機器人或主管的子代中。 請注意，發射器可以發送數據，但不能接收數據。 為了模擬兩個機器人之間的單向通信，一個機器人必須具有發射器，而另一個機器人必須具有接收器。 為了模擬兩個機器人之間的雙向通信，每個機器人都需要同時具有發射器和接收器。 請注意，消息永遠不會從一個機器人傳輸到自身。</p>
<p>Field Summary 領域摘要</p>
<ul>
<li>
<p><code>類型(type)</code>: 信號類型：“無線電”，“串行”或“紅外”。傳輸類型為“無線電”（默認）和“串行”的信號時不會考慮障礙。但是，“紅外”類型的信號確實考慮了發射器和接收器之間的潛在障礙。具有定義的邊界對象的任何固體對象（固體，機器人等）都可能成為“紅外”通信的潛在障礙。發射或接收機器人的結構本身不會阻止“紅外”傳輸。當前，“無線電”和“串行”類型之間沒有實現上的區別。</p>
</li>
<li>
<p><code>範圍(range)</code>: 發射球的半徑（以米為單位）。如果接收方位於發射範圍內，則它只能接收一條消息。範圍的值-1（默認值）被視為無限範圍。</p>
</li>
<li>
<p><code>最大範圍(maxRange)</code>: 定義範圍允許的最大值。該字段定義可以使用wb_emitter_set_range函數設置的最大值。 maxRange的值-1（默認值）被認為是無限的。</p>
</li>
<li>
<p><code>孔徑(aperture):發射錐的張開角（弧度）；僅用於“紅外”。圓錐體的頂點位於發射器坐標系的原點（[0 0 0]），並且圓錐體的軸與發射器坐標系的z軸重合。 “紅外”發射器只能將數據發送到當前位於其發射錐內的接收器。 -1的孔徑（默認）被認為是無限大的，這意味著發射的信號是全向的。對於“無線電”和“串行”發射器，將忽略此字段。有關範圍和光圈的圖示，請參見此圖。</code></p>
<code><img alt="" height="361" src="/images/emitter_receiver.png" width="382"/></code></li>
<li>
<p><code>頻道(channel)</code>: 傳輸通道。這是“紅外線”發射器的標識號或“無線電”發射器的頻率。通常，接收器必須使用與發射器相同的通道來接收發射的數據。但是，特殊頻道-1允許在所有頻道上廣播消息。通道0（默認）保留用於與物理插件通信。對於機器人之間的通信，請使用正數通道號。</p>
</li>
<li>
<p><code>波特率(baudRate)</code>: 波特率是以每秒位數表示的通信速度。 -1的baudRate（默認值）被視為無窮大，並導致數據立即（在一個基本時間步內）從發射器傳輸到接收器。</p>
</li>
<li>
<p><code>字節大小byteSize</code>: 字節大小是傳輸一個字節信息所需的位數。 通常為8（默認值），但如果使用控制位，則可以更多。</p>
</li>
<li>
<p><code>緩衝區大小(bufferSize)</code>: 指定傳輸緩衝區的大小（以字節為單位）。 發射器中排隊的數據包中的字節總數不能超過此數目。 -1的bufferSize（默認值）被視為無限的緩衝區大小。</p>
</li>
</ul>
<h1>Assiganment3</h1>
<h2>虛擬主機設定</h2>
<h1>遇到問題</h1>
<h2>網頁錯誤</h2>
<p>在某次推送完畢之後動態網頁就無法打開編輯</p>
<p><img alt="" height="269" src="/images/網頁錯誤.png" width="500"/></p>
<p><span>▲網頁錯誤訊息</span></p>
<p><img alt="" height="348" src="/images/程式碼.png" width="500"/></p>
<p><img alt="" height="350" src="/images/程式碼2.png" width="500"/></p>
<p><span>▲嘗試找尋問題修正但失敗</span></p>
<p>發現無法解決問題詢問老師後從server端檢查</p>
<p><img alt="" height="479" src="/images/檢查是否python錯誤.png" width="500"/></p>
<p>發現是推送和python版本錯誤,還原成前一個版本後更改設定</p>
<p><img alt="" height="487" src="/images/將舊版python更新.png" width="500"/></p>
<p>重新執行就修復完成</p>
<h2>協同網頁推送</h2>
<p>在12~16週老師每週都會隨機抽取同學進行分組協同編輯網頁</p>
<p>但每次推送常會有不小心將倉儲或是網頁爆炸的情況</p>
<p>所以在推送之前需要的步驟有以下幾點</p>
<p><img alt="" height="145" src="/images/推送方法.png" width="500"/></p>
<p>1.<span style="color: #808080; background-color: #ffff99;">git clone 倉儲</span> <span>→ 下載想要編輯的倉儲到近端</span></p>
<p>2. <span style="background-color: #ffff99;">在進端進入該倉儲並git submodule init / git submodule update </span><span>→ 將老師遠端的cmsimde下載入倉儲內的cmsimde資料夾</span></p>
<p>3. <span style="background-color: #ffff99;">在編輯完git pull </span><span>→ 確認近端沒有衝突或是無法推送的檔案</span></p>
<p>4. <span style="background-color: #ffff99;">輸入git status </span><span>→ 確認遠端和近端即將要推送的資料有無錯誤</span></p>
<p>若是遠端和近端有差異會產生以下訊息</p>
<p><img alt="" height="333" src="/images/偕同網頁修正.png" width="500"/></p>
<p><span style="color: #ff0000;">解決方法:</span></p>
<p>再次使用python 進入動態網頁將錯誤修正並轉為靜態網頁後即可成功推送無衝突版本</p>
<h2>leo打不開</h2>
<p>在準備編輯reval簡報時發現leo檔打不開</p>
<p><img alt="" height="182" src="/images/messageImage_1593442588744.jpg" width="500"/></p>
<p>使用 pip list 檢查發現是未下載最新的leo檔</p>
<p><img alt="" height="171" src="/images/leo.png" width="500"/></p>
<p><span>▲使用 pip install leo==6.2.1 </span><span>指定安裝 leo 6.2.1 版本</span></p>
<p><span><img alt="" height="312" src="/images/messageImage_1593446465322.jpg" width="500"/></span></p>
<p><span>▲即可成功開啟leo</span></p>